using System;
using System.Diagnostics;
using System.IO;
using System.Text;
using UnityEngine;
using UnityEditor;

namespace UnityProBuilder
{
    /// <summary>
    /// 
    /// </summary>
    public static class UnityProBuilder
    {
        private static readonly string sAndroidBuildConfig = Path.Combine(Application.dataPath, "AndoridBuild.txt");
        private static readonly string siOSBuildConfig = Path.Combine(Application.dataPath, "iOSBuild.txt");
        private static readonly string sWindowsBuildConfig = Path.Combine(Application.dataPath, "Windows.txt");

        private static readonly string sDebugBatchPath = Path.Combine(Application.dataPath, "../BuildDebug");
        private static readonly string sReleaseBatchPath = Path.Combine(Application.dataPath, "../BuildRelease");

        private static string GetDebugBatchPath(BuildTarget platform, string ext)
        {
            return string.Concat(sDebugBatchPath, "-", platform.ToString(), ext);
        }

        private static string GetReleaseBatchPath(BuildTarget platform, string ext)
        {
            return string.Concat(sReleaseBatchPath, "-", platform.ToString(), ext);
        }

        [MenuItem("BuildTools/ExportAndroid")]
        public static void ExportAndroid()
        {
            DefaultUnityBuildPipeline.Launch(sAndroidBuildConfig);
        }

        [MenuItem("BuildTools/ExportiOS")]
        public static void ExportiOS()
        {
            DefaultUnityBuildPipeline.Launch(siOSBuildConfig);
        }

        [MenuItem("BuildTools/ExportWindows")]
        public static void ExportWindows()
        {
            DefaultUnityBuildPipeline.Launch(sWindowsBuildConfig);
        }

        [MenuItem("BuildTools/GenerateShell")]
        public static void GenerateShell()
        {
#if UNITY_EDITOR_WIN
            GenerateWindowsBatch(GetDebugBatchPath(BuildTarget.Android, ".bat"), "UnityProBuilder.UnityProBuilder.ExportAndroid", "build_android.log", "-android -quit");
#else
            //GenerateMacShell(GetDebugBatchPath(BuildTarget.Android, ".sh"));
            //GenerateMacShell(GetDebugBatchPath(BuildTarget.iOS, ".sh"));
#endif
        }

        private static void GenerateWindowsBatch(string path, string method, string logFileName, string otherParams = null)
        {
            string pathOfUnity = Process.GetCurrentProcess().MainModule.FileName;

            StringBuilder sb = new StringBuilder(1024);
            sb.AppendLine("REM ##################################################################")
                .AppendLine("REM This file is generated by UnityProBuilder, Please do not modify it.")
                .AppendLine("REM ##################################################################")
                .AppendLine("REM Set Unity Path.")
                .Append("set UNITY_PATH=\"").Append(pathOfUnity).AppendLine("\"")
                .AppendLine("set PROJECT_PATH=%~dp0")
                .Append("%UNITY_PATH% -batchmode -projectPath %PROJECT_PATH% -executeMethod ")
                .Append(method)
                .Append(" -logFile %PROJECT_PATH%")
                .Append(logFileName)
                .Append(" ")
                .AppendLine(otherParams);

            File.WriteAllText(path, sb.ToString());
        }

        private static void GenerateMacShell()
        {

        }

        [MenuItem("BuildTools/Text")]
        public static void Export()
        {
        }
    }
}
